import { Base, AdaptiveActionContainer, Action, SurveyElement, IAction, ActionContainer } from "survey-core";
import { SurveyCreatorModel } from "../creator-base";
export declare class SurveyElementActionContainer extends AdaptiveActionContainer {
    private needToShrink;
    private setModeForActions;
    private calcItemSize;
    fit(dimension: number, dotsItemSize: number): void;
}
export declare class SurveyElementAdornerBase<T extends SurveyElement = SurveyElement> extends Base {
    creator: SurveyCreatorModel;
    static AdornerValueName: string;
    actionContainer: ActionContainer;
    protected expandCollapseAction: IAction;
    allowDragging: boolean;
    expandCollapseAnimationRunning: boolean;
    rootElement: HTMLElement;
    protected get dragInsideCollapsedContainer(): boolean;
    allowExpandCollapse: boolean;
    collapsed: boolean;
    private _renderedCollapsed;
    isAnimationRunningCollapsed: boolean;
    protected getAnimatedElement(): any;
    protected getInnerAnimatedElements(): HTMLElement[];
    protected getCollapsingCssClassName(): string;
    protected getExpandingCssClassName(): string;
    private hoverTimeout;
    private isHovered;
    protected get hoverDelay(): number;
    hover(e: MouseEvent, element: HTMLElement | any): void;
    private getExpandCollapseAnimationOptions;
    private animationCollapsed;
    set renderedCollapsed(val: boolean);
    get renderedCollapsed(): boolean;
    protected createActionContainers(): void;
    protected createActionContainer(): ActionContainer;
    private dragCollapsedTimer;
    protected get canExpandOnDrag(): boolean;
    private draggedIn;
    protected dragIn(): void;
    protected expandWithDragIn(): void;
    protected dragOut(): void;
    dblclick(event: any): void;
    private allowEditOption;
    private selectedPropPageFunc;
    private sidebarFlyoutModeChangedFunc;
    protected surveyElement: T;
    constructor(creator: SurveyCreatorModel, surveyElement: T);
    static GetAdorner<V = SurveyElementAdornerBase>(surveyElement: SurveyElement): V;
    static RestoreStateFor(surveyElement: SurveyElement): void;
    protected restoreState(): void;
    protected detachElement(surveyElement: T): void;
    protected attachElement(surveyElement: T): void;
    protected setSurveyElement(surveyElement: T): void;
    protected checkActionProperties(): void;
    attachToUI(surveyElement: T, rootElement?: HTMLElement): void;
    detachFromUI(): void;
    dispose(): void;
    protected onElementSelectedChanged(isSelected: boolean): void;
    protected getExpandCollapseAction(): IAction;
    protected cleanActionsContainer(): void;
    protected updateActionsContainer(surveyElement: SurveyElement): void;
    protected updateActionsProperties(): void;
    protected getAllowDragging(options: any): boolean;
    protected getAllowExpandCollapse(options: any): boolean;
    protected updateElementAllowOptions(options: any, operationsAllow: boolean): void;
    protected isOperationsAllow(): boolean;
    protected updateActionVisibility(id: string, isVisible: boolean): void;
    getActionById(id: string): Action;
    protected buildActions(items: Array<Action>): void;
    isDisableSelecting: boolean;
    protected disableActionFocusing(isMouse: boolean, event: any): void;
    protected canSelectElement(): boolean;
    get allowEdit(): boolean;
    get showAddQuestionButton(): boolean;
    protected setShowAddQuestionButton(val: boolean): void;
    protected duplicate(): void;
    protected delete(): void;
    protected getCss(): string;
}
